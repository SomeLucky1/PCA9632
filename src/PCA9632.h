#ifndef PCA9632_H
#define PCA9632_H

#define RGB_ADDRESS (0x62)

#include <Wire.h>

// Register definitions (page 11, table 7)
#define REG_MODE1       0x00
#define REG_MODE2       0x01
#define REG_PWM0        0x02
#define REG_PWM1        0x03
#define REG_PWM2        0x04
#define REG_PWM3        0x05
#define REG_GRPPWM      0x06
#define REG_GRPFREQ     0x07
#define REG_LEDOUT      0x08
#define REG_SUBADR1     0x09
#define REG_SUBADR2     0x0A
#define REG_SUBADR3     0x0B
#define REG_ALLCALLADR  0x0C

// Bits in REG_MODE1 (page 12, table 8)
#define BIT_AI2     7
#define BIT_AI1     6
#define BIT_AI0     5
#define BIT_SLEEP   4
#define BIT_SUB1    3
#define BIT_SUB2    2
#define BIT_SUB3    1
#define BIT_ALLCALL 0

// Bits in REG_MODE2 (page 12-13, table 9)
#define BIT_DMBLNK  5
#define BIT_INVRT   4
#define BIT_OCH     3
#define BIT_OUTDRV  2
#define BIT_OUTNE1  1
#define BIT_OUTNE0  0

// Bits in REG_LEDOUT (page 14, table 13)
#define BIT_LDR3    6
#define BIT_LDR2    4
#define BIT_LDR1    2
#define BIT_LDR0    0
#define OUTDRV_OPEN_DRAIN 0
#define OUTDRV_TOTEM_POLE 1
#define LDR_STATE_OFF       0x00
#define LDR_STATE_ON        0x01
#define LDR_STATE_IND       0x02
#define LDR_STATE_IND_GRP   0x03

// Auto-Increment options (page 10, table 6)
#define AI_DISABLED 0
#define AI_ALL      1
#define AI_IND      2
#define AI_GBL      3
#define AI_IND_GBL  4
#define GROUP_CONTROL_MODE_BLINKING 0
#define GROUP_CONTROL_MODE_DIMMING  1

// Frequency of 24 Hz is used
#define BLINKING_PERIOD_125_MS  3   // ((1 / 24 Hz) * 3 cycles)
#define BLINKING_PERIOD_250_MS  6   // ((1 / 24 Hz) * 6 cycles)
#define BLINKING_PERIOD_500_MS  12  // ((1 / 24 Hz) * 12 cycles)
#define BLINKING_PERIOD_1_S     24  // ((1 / 24 Hz) * 24 cycles)
#define BLINKING_PERIOD_MAX     255 // 10.73 s
#define BLINKING_RATIO_BALANCED 0.5

// linearized brightness values
const size_t len_ledLinear = 256;
const uint8_t ledLinear[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05,
0x05, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B,
0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0F, 0x0F, 0x10, 0x11, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x23, 0x24, 0x26, 0x27, 0x29, 0x2B, 0x2C,
0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x43, 0x45, 0x47, 0x4A, 0x4C, 0x4F,
0x51, 0x54, 0x57, 0x59, 0x5C, 0x5F, 0x62, 0x64, 0x67, 0x6A, 0x6D, 0x70, 0x73, 0x76, 0x79, 0x7C,
0x7F, 0x82, 0x85, 0x88, 0x8B, 0x8E, 0x91, 0x94, 0x97, 0x9A, 0x9C, 0x9F, 0xA2, 0xA5, 0xA7, 0xAA,
0xAD, 0xAF, 0xB2, 0xB4, 0xB7, 0xB9, 0xBB, 0xBE, 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE,
0xD0, 0xD2, 0xD3, 0xD5, 0xD7, 0xD8, 0xDA, 0xDB, 0xDD, 0xDE, 0xDF, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5,
0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xED, 0xEE, 0xEF, 0xEF, 0xF0, 0xF1, 0xF1, 0xF2,
0xF2, 0xF3, 0xF3, 0xF4, 0xF4, 0xF5, 0xF5, 0xF6, 0xF6, 0xF6, 0xF7, 0xF7, 0xF7, 0xF8, 0xF8, 0xF8,
0xF9, 0xF9, 0xF9, 0xF9, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFC,
0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF};

class PCA9632 {

public:
    PCA9632();
    void begin();
    void setPwm(uint8_t regPwm, uint8_t pwm);
    void setGrpPwm(uint8_t pwm);
    void setBlinking(uint8_t blinkPeriod, float onOffRatio);
    void setColor(uint8_t r, uint8_t g, uint8_t b);
    void setRed(uint8_t r);
    void setGreen(uint8_t g);
    void setBlue(uint8_t b);
    void setWhite(uint8_t w);
    void setRGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
    void setDrvState(uint8_t state);
    void setLdrState(uint8_t state, uint8_t ldrBit);
    void setLdrStateAll(uint8_t state);
    void setAutoIncrement(uint8_t option);
    void setGroupControlMode(uint8_t mode);

private:
    uint8_t linearize(uint8_t pwm);
    void writeReg(uint8_t registerAddress, uint8_t data);
    uint8_t readReg(uint8_t registerAddress);
    uint8_t _deviceAddres;
    uint8_t _regRedPwm, _regGreenPwm, _regBluePwm, _regWhitePwm;
    uint8_t _storedRegLedout;
    TwoWire *_wire;
};

#endif //PCA9632_H
